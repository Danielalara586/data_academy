# -*- coding: utf-8 -*-
"""Density_Estimate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkDU9bjDXpI7ElQm16r6OmR74rnTg4WU
"""

import numpy as np
from matplotlib import pyplot
from numpy.random import normal
from scipy.stats import norm

sample = normal(size=1000) # Random generator based on normal distribution
pyplot.hist(sample, bins=30)
pyplot.show()

"""## Parametric Estimation """

sample = normal(loc=50, scale=5,size=1000) # mu = 50, sigma = 5
mu = sample.mean()
sigma = sample.std()
dist = norm(mu, sigma)
values = [value for value in range(30, 70)]
probabilites = [dist.pdf(value) for value in values]
pyplot.hist(sample, bins=30, density=True)
pyplot.plot(values, probabilites)
pyplot.show()

"""## Nonparametric Estimation"""

from numpy import hstack
from sklearn.neighbors import KernelDensity

#construimos una distribución bimodal
sample1 = normal(loc=20, scale=5, size=300)
sample2 = normal(loc=40, scale=5, size=700)
sample = hstack((sample1, sample2))

model = KernelDensity(bandwidth=2, kernel='gaussian')
sample = sample.reshape((len(sample), 1))
model.fit(sample)

values = np.asarray([value for value in range(1, 60)])
values = values.reshape((len(values), 1))
probabilities = model.score_samples(values) #probabilidad logarítmica
probabilities = np.exp(probabilities)  # inversión de probabilidad

pyplot.hist(sample, bins=50, density=True) 
pyplot.plot(values[:], probabilities)
pyplot.show()

