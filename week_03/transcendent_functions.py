# -*- coding: utf-8 -*-
"""Transcendent_Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mIXVMqe8am7Hz4jV4fq9AQClOvO6TPD-

## Trigonometric Function
"""

# Libraries
import matplotlib.pyplot as plt # Library for graphs
import numpy as np # Library for vectors and math utilities

from math import pi

N = 100 # Number of points

# Sine Function 
def f(x):
  return np.sin(x)

x = np.linspace(-2*pi, 2*pi, N)

y = f(x)

# Graph
fig, ax = plt.subplots()
ax.plot(x, y)
ax.grid()
ax.axhline(y = 0, color = 'r') # Horizontal line
ax.axvline(x = 0, color = 'r') # Vertical line

"""## Exponential Function """

def f(x):
  return np.e**x

x = np.linspace(-1, 1, num=100000)

y = f(x)

delta = 0.01

# Graph
fig, ax = plt.subplots()
ax.plot(x, y)
ax.grid()
ax.set_ylim(1 - delta,1 + delta)
ax.set_xlim(0 - delta, 0 + delta)
ax.axhline(y = 0, color = 'r') # Horizontal line
ax.axvline(x = 0, color = 'r') # Vertical line

"""## Logarithmic Function """

# Utility in decibels
def f(x):
  return np.log10(x)

x = np.linspace(0.01, 1000, num=N)

y = f(x)

# Graph
fig, ax = plt.subplots()
ax.plot(x, y)
ax.grid()
ax.axhline(y = 0, color = 'r') # Horizontal line
ax.axvline(x = 0, color = 'r') # Vertical line

"""## Sectioned Function"""

def H(X):
  Y = np.zeros(len(X))
  for idx,x in enumerate(X):
    if x>=0:
      Y[idx] = 1.0
  return Y

# Datos para graficaci√≥n

N = 1000

X = np.linspace(-1,1, num=N)

y = H(X)

fig, ax = plt.subplots()
ax.plot(X, y)
ax.grid()